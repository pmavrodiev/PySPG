//:::~ 
//:::~ File automatically generated by ctt.py  NO EDITAR
//:::~ 

#include <tclap/CmdLine.h>
#include "base.h"

//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Definiciones de las variables seteables desde el infile
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

namespace CTGlobal
{

  std::string filein = "input.rank";

  int verbosityLevel  = 0;
  bool quietRun = false;
  std::string prog_name = "" ;

//:::~  sets whether to store the dynamics
bool  store_dynamics = false ;
//:::~  file name to store the dynamics
std::string store_dynamics_filename = "dynamics.out" ;
//:::~  time step for the simulation
double deltat = 0.01 ;
//:::~  number of time steps in the simulation
long t = 500 ;
//:::~  number of agents
int N = 100 ;
//:::~  the linear (or logarithm of) the Truth
double lnTruth = 6 ;
//:::~  the maximum diffusion for the noise term
double Dmax = 3.0 ;
//:::~  the minimum diffusion for the noise term
double Dmin = 0.01 ;
//:::~  sensitivity of agents to their ranks
double eta = 5.0 ;
//:::~  number of realizations per W,eta pair
int Q = 100 ;
//:::~  initial opinions
std::string filename = "/home/pmavrodiev/run/rank.in" ;
//:::~  semilla de los numeros aleatorios
long randomseed = 0 ;

// from backends


std::fstream *f_dynamics_out = 0;

};




//:::~ :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//:::::::::::::: OPTION READING (BEGIN) ::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void CTGlobal::initialize_program(int &argc, char** & argv){
 using namespace std;
 
 	  TCLAP::CmdLine cmd(string( " release date: ")+RELEASE_DATE, ' ', VERSION_NUMBER);

    TCLAP::ValueArg<string> nameArg("i","input","configuration input file name",false,filein,"string"); 
    cmd.add( nameArg );

    TCLAP::SwitchArg quietSwitch("q","quiet","Quietly runs the program", false);
    cmd.add( quietSwitch );

    TCLAP::MultiSwitchArg verboseMSwitch("v","verbose", "Increases verbosity level");
    cmd.add( verboseMSwitch );

 try {  
    cmd.parse( argc, argv );
    filein = nameArg.getValue();
    quietRun = quietSwitch.getValue();
    if(! quietRun) verbosityLevel = verboseMSwitch.getValue();


 } catch (TCLAP::ArgException &e) 
 { cerr << "error: " << e.error() << " for arg " << e.argId() << endl; }
 
  
  if(!quietRun) {
    std:: cerr << "\n< " << argv[0] << " > version: "<< VERSION_NUMBER  ;
    std:: cerr << " ( released on: "<< RELEASE_DATE << " )" <<  std::endl;
    std:: cerr << "< " << argv[0] << " > compiled on: "<< __DATE__  ;
    std:: cerr << " "<< __TIME__ <<  std::endl;
  }

 if(filein != "" ){
 std::fstream * sin = new std::fstream( filein.c_str() ,std::ios::in);
 
  if( !sin->fail() )
    input_variables(*sin);
  else{
    std:: cerr << "< " << argv[0] << " - ERROR > " ;
    std::cerr << "could not read input from file '" << filein << "'"  << std::endl;
    exit( EXIT_FAILURE );
  } 
} 

if(store_dynamics ){
    
    f_dynamics_out = new std::fstream (store_dynamics_filename.c_str(),std::ios::out | std::ios::app );
    if( f_dynamics_out->fail()  ) {
      std::cerr << "< " << argv[0] << " - ERROR > " ;
      std::cerr << "opening file: '" << store_dynamics_filename ;
      std::cerr << "' for output" << std::endl;
      exit(EXIT_FAILURE);
    }
}


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//:::::::::::::: OPTION READING ( END ) ::::::::::::::::::::::::::::::::::::::::
//:::~ :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
}

void CTGlobal::query_output(std::string type, std::string msg , std::string oc, int indent){
  for(int i=0;i<indent;i++) std::cerr << " ";
  std::cerr << oc[0] << " ";
  std::cerr << prog_name << " - "<< type << " ";
  std::cerr << oc[1] << " ";
  std::cerr << msg << std::endl;
}


//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Parse de las variables
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

void CTGlobal::input_variables(std::istream &fin)
{
    
    
 std::string foo;
 fin >> foo;
 while( (!fin.eof()) &&  (foo != "end") )
 {
    
  if (  (foo !="store_dynamics_filename") && (foo !="deltat") && (foo !="t") && (foo !="N") && (foo !="lnTruth") && (foo !="Dmax") && (foo !="Dmin") && (foo !="eta") && (foo !="Q") && (foo !="filename") && (foo !="randomseed") && (foo !="store_dynamics")  )
  {  
    std::cerr << " +  {ctt - ERROR} command " <<  foo << " not understood";
    std::cerr << std::endl;
    exit(EXIT_FAILURE);
    
    
  }  
  if (foo == "store_dynamics")
  {
      store_dynamics =true;
      std::cerr << " +  {ctt - SETTING} " << "store_dynamics = true" << std::endl;
  }
  if (foo == "store_dynamics_filename")
  {
    fin >>  store_dynamics_filename ;
      std::cerr << " +  {ctt - SETTING} " << "store_dynamics_filename = " << store_dynamics_filename  << std::endl;

  }
  if (foo == "deltat")
  {
    fin >>  deltat ;
      std::cerr << " +  {ctt - SETTING} " << "deltat = " << deltat  << std::endl;

  }
  if (foo == "t")
  {
    fin >>  t ;
      std::cerr << " +  {ctt - SETTING} " << "t = " << t  << std::endl;

  }
  if (foo == "N")
  {
    fin >>  N ;
      std::cerr << " +  {ctt - SETTING} " << "N = " << N  << std::endl;

  }
  if (foo == "lnTruth")
  {
    fin >>  lnTruth ;
      std::cerr << " +  {ctt - SETTING} " << "lnTruth = " << lnTruth  << std::endl;

  }
  if (foo == "Dmax")
  {
    fin >>  Dmax ;
      std::cerr << " +  {ctt - SETTING} " << "Dmax = " << Dmax  << std::endl;

  }
  if (foo == "Dmin")
  {
    fin >>  Dmin ;
      std::cerr << " +  {ctt - SETTING} " << "Dmin = " << Dmin  << std::endl;

  }
  if (foo == "eta")
  {
    fin >>  eta ;
      std::cerr << " +  {ctt - SETTING} " << "eta = " << eta  << std::endl;

  }
  if (foo == "Q")
  {
    fin >>  Q ;
      std::cerr << " +  {ctt - SETTING} " << "Q = " << Q  << std::endl;

  }
  if (foo == "filename")
  {
    fin >>  filename ;
      std::cerr << " +  {ctt - SETTING} " << "filename = " << filename  << std::endl;

  }
  if (foo == "randomseed")
  {
    fin >>  randomseed ;
      std::cerr << " +  {ctt - SETTING} " << "randomseed = " << randomseed  << std::endl;

  }
  fin >> foo;
 }
  if(randomseed)
    rt_rand_init(randomseed);
    
  else
  {
      struct timeval tv;
     gettimeofday(&tv, NULL); 
    randomseed=tv.tv_usec;
    rt_rand_init(randomseed);
  }
  std::fstream frandom("random.seed",std::ios::app | std::ios::out );
  frandom << randomseed  << std::endl ;  
  frandom.close();  
    
}

//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Pequegno Help
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

void CTGlobal::help_available()
{

 
   std::cerr << " store_dynamics := tipo bool "  << std::endl ;
   std::cerr << "--> sets whether to store the dynamics" << std::endl;
   std::cerr << "    Valor por defecto : false" << std::endl;    std::cerr << "store_dynamics_filename := tipo  string "  << std::endl ;
   std::cerr << "--> file name to store the dynamics" << std::endl;
   std::cerr << "    Valor por defecto : \"dynamics.out\""  << std::endl ;

   std::cerr << "deltat := tipo  double "  << std::endl ;
   std::cerr << "--> time step for the simulation" << std::endl;
   std::cerr << "    Valor por defecto : 0.01"  << std::endl ;

   std::cerr << "t := tipo  long "  << std::endl ;
   std::cerr << "--> number of time steps in the simulation" << std::endl;
   std::cerr << "    Valor por defecto : 500"  << std::endl ;

   std::cerr << "N := tipo  int "  << std::endl ;
   std::cerr << "--> number of agents" << std::endl;
   std::cerr << "    Valor por defecto : 100"  << std::endl ;

   std::cerr << "lnTruth := tipo  double "  << std::endl ;
   std::cerr << "--> the linear (or logarithm of) the Truth" << std::endl;
   std::cerr << "    Valor por defecto : 6"  << std::endl ;

   std::cerr << "Dmax := tipo  double "  << std::endl ;
   std::cerr << "--> the maximum diffusion for the noise term" << std::endl;
   std::cerr << "    Valor por defecto : 3.0"  << std::endl ;

   std::cerr << "Dmin := tipo  double "  << std::endl ;
   std::cerr << "--> the minimum diffusion for the noise term" << std::endl;
   std::cerr << "    Valor por defecto : 0.01"  << std::endl ;

   std::cerr << "eta := tipo  double "  << std::endl ;
   std::cerr << "--> sensitivity of agents to their ranks" << std::endl;
   std::cerr << "    Valor por defecto : 5.0"  << std::endl ;

   std::cerr << "Q := tipo  int "  << std::endl ;
   std::cerr << "--> number of realizations per W,eta pair" << std::endl;
   std::cerr << "    Valor por defecto : 100"  << std::endl ;

   std::cerr << "filename := tipo  string "  << std::endl ;
   std::cerr << "--> initial opinions" << std::endl;
   std::cerr << "    Valor por defecto : \"/home/pmavrodiev/run/rank.in\""  << std::endl ;

   std::cerr << "randomseed := tipo  long "  << std::endl ;
   std::cerr << "--> semilla de los numeros aleatorios" << std::endl;
   std::cerr << "    Valor por defecto : 0"  << std::endl ;

 exit(EXIT_FAILURE);
}

