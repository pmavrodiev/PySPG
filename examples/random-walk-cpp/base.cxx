//:::~ 
//:::~ File automatically generated by ctt.py  NO EDITAR
//:::~ 

#include <tclap/CmdLine.h>
#include "base.h"

//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Definiciones de las variables seteables desde el infile
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

namespace CTGlobal
{

  std::string filein = "input.random_walk";

  int verbosityLevel  = 0;
  bool quietRun = false;
  std::string prog_name = "" ;

//:::~  model type
std::string model = "UNBIASED" ;
//:::~  diffusion coefficient
double D = 1.0 ;
//:::~  drift coefficient
double drift = 0.0 ;
//:::~  filtering time equalts this times ts
long filter_timesteps = 0 ;
//:::~  fnumber of timesteps in the simulation
long simulation_timesteps = 100 ;
//:::~  semilla de los numeros aleatorios
long randomseed = 0 ;

// from backends

};




//:::~ :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//:::::::::::::: OPTION READING (BEGIN) ::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
void CTGlobal::initialize_program(int &argc, char** & argv){
 using namespace std;
 
 	  TCLAP::CmdLine cmd(string( " release date: ")+RELEASE_DATE, ' ', VERSION_NUMBER);

    TCLAP::ValueArg<string> nameArg("i","input","configuration input file name",false,filein,"string"); 
    cmd.add( nameArg );

    TCLAP::SwitchArg quietSwitch("q","quiet","Quietly runs the program", false);
    cmd.add( quietSwitch );

    TCLAP::MultiSwitchArg verboseMSwitch("v","verbose", "Increases verbosity level");
    cmd.add( verboseMSwitch );

 try {  
    cmd.parse( argc, argv );
    filein = nameArg.getValue();
    quietRun = quietSwitch.getValue();
    if(! quietRun) verbosityLevel = verboseMSwitch.getValue();


 } catch (TCLAP::ArgException &e) 
 { cerr << "error: " << e.error() << " for arg " << e.argId() << endl; }
 
  
  if(!quietRun) {
    std:: cerr << "\n< " << argv[0] << " > version: "<< VERSION_NUMBER  ;
    std:: cerr << " ( released on: "<< RELEASE_DATE << " )" <<  std::endl;
    std:: cerr << "< " << argv[0] << " > compiled on: "<< __DATE__  ;
    std:: cerr << " "<< __TIME__ <<  std::endl;
  }

 if(filein != "" ){
 std::fstream * sin = new std::fstream( filein.c_str() ,std::ios::in);
 
  if( !sin->fail() )
    input_variables(*sin);
  else{
    std:: cerr << "< " << argv[0] << " - ERROR > " ;
    std::cerr << "could not read input from file '" << filein << "'"  << std::endl;
    exit( EXIT_FAILURE );
  } 
} 


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//:::::::::::::: OPTION READING ( END ) ::::::::::::::::::::::::::::::::::::::::
//:::~ :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
}

void CTGlobal::query_output(std::string type, std::string msg , std::string oc, int indent){
  for(int i=0;i<indent;i++) std::cerr << " ";
  std::cerr << oc[0] << " ";
  std::cerr << prog_name << " - "<< type << " ";
  std::cerr << oc[1] << " ";
  std::cerr << msg << std::endl;
}


//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Parse de las variables
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

void CTGlobal::input_variables(std::istream &fin)
{
    
    
 std::string foo;
 fin >> foo;
 while( (!fin.eof()) &&  (foo != "end") )
 {
    
  if (  (foo !="model") && (foo !="D") && (foo !="drift") && (foo !="filter_timesteps") && (foo !="simulation_timesteps") && (foo !="randomseed")  )
  {  
    std::cerr << " +  {ctt - ERROR} command " <<  foo << " not understood";
    std::cerr << std::endl;
    exit(EXIT_FAILURE);
    
    
  }  
  if (foo == "model")
  {
    {
      fin >>  model ;
      if (  (model!="UNBIASED")&&(model!="BIASED")&&(model!="MODEL2") )
      {
        std::cerr << " +  {ctt - ERROR} '" << model  << "' not between possible values of model"  << std::endl;
        std::cerr << " +  {ctt - ERROR} Possible values are: " <<  "UNBIASED"<< " " <<"BIASED"<< " " <<"MODEL2"  << std::endl;
        exit(EXIT_FAILURE);
      }
    }
    std::cerr << " +  {ctt - SETTING} " << "model = " << model  << std::endl;

  }
  if (foo == "D")
  {
    fin >>  D ;
      std::cerr << " +  {ctt - SETTING} " << "D = " << D  << std::endl;

  }
  if (foo == "drift")
  {
    fin >>  drift ;
      std::cerr << " +  {ctt - SETTING} " << "drift = " << drift  << std::endl;

  }
  if (foo == "filter_timesteps")
  {
    fin >>  filter_timesteps ;
      std::cerr << " +  {ctt - SETTING} " << "filter_timesteps = " << filter_timesteps  << std::endl;

  }
  if (foo == "simulation_timesteps")
  {
    fin >>  simulation_timesteps ;
      std::cerr << " +  {ctt - SETTING} " << "simulation_timesteps = " << simulation_timesteps  << std::endl;

  }
  if (foo == "randomseed")
  {
    fin >>  randomseed ;
      std::cerr << " +  {ctt - SETTING} " << "randomseed = " << randomseed  << std::endl;

  }
  fin >> foo;
 }
  if(randomseed)
    rt_rand_init(randomseed);
    
  else
  {
      struct timeval tv;
     gettimeofday(&tv, NULL); 
    randomseed=tv.tv_usec;
    rt_rand_init(randomseed);
  }
  std::fstream frandom("random.seed",std::ios::app | std::ios::out );
  frandom << randomseed  << std::endl ;  
  frandom.close();  
    
}

//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++
//:::~ Pequegno Help
//:::~ +++++++++++++++++++++++++++++++++++++++++++++++++++++++

void CTGlobal::help_available()
{

 
   std::cerr << "model := tipo  string "  << std::endl ;
   std::cerr << "--> model type" << std::endl;
   std::cerr       << "    Possible values are: " <<  "UNBIASED"<< " " <<"BIASED"<< " " <<"MODEL2"  << std::endl ;

   std::cerr << "D := tipo  double "  << std::endl ;
   std::cerr << "--> diffusion coefficient" << std::endl;
   std::cerr << "    Valor por defecto : 1.0"  << std::endl ;

   std::cerr << "drift := tipo  double "  << std::endl ;
   std::cerr << "--> drift coefficient" << std::endl;
   std::cerr << "    Valor por defecto : 0.0"  << std::endl ;

   std::cerr << "filter_timesteps := tipo  long "  << std::endl ;
   std::cerr << "--> filtering time equalts this times ts" << std::endl;
   std::cerr << "    Valor por defecto : 0"  << std::endl ;

   std::cerr << "simulation_timesteps := tipo  long "  << std::endl ;
   std::cerr << "--> fnumber of timesteps in the simulation" << std::endl;
   std::cerr << "    Valor por defecto : 100"  << std::endl ;

   std::cerr << "randomseed := tipo  long "  << std::endl ;
   std::cerr << "--> semilla de los numeros aleatorios" << std::endl;
   std::cerr << "    Valor por defecto : 0"  << std::endl ;

 exit(EXIT_FAILURE);
}

